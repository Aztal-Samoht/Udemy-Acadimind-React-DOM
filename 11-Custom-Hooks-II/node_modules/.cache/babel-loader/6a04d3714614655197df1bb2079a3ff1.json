{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nasync function useHttp(requestConfig, appyData) {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : NULL\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n      setTasks(loadedTasks);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  }; //close 'sendRequest\n\n\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n}\n\n_s(useHttp, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\n\nexport default useHttp; // try {\n//   //fetch tasks\n//   const response = await fetch( \"https://react-http-c0588-default-rtdb.firebaseio.com/tasks.json\" );\n//   //check status\n//   if (response.status !== 200) {\n//     throw new Error(\"failed to GET tasks\");\n//   }\n//   const data = await response.json();\n//   const loadedTasks = [];\n//   for (const taskKey in data) {\n//     loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n//   }\n//   return {\n//     tasks: loadedTasks,\n//     error: null  \n//   }\n// } catch (err) {\n//   return {\n//     tasks: task,\n//     error: err\n//   }\n// }\n// }\n// ,\n// (verb === \"GET\" ? {} : { method: 'POST', body: JSON.stringify(task), headers: {'Content-Type': 'application/json' }})\n// );","map":{"version":3,"sources":["D:/Dev/React/11-Custom-Hooks-II/src/hooks/useHTTP.js.js"],"names":["useState","useHttp","requestConfig","appyData","isLoading","setIsLoading","error","setError","sendRequest","taskText","response","fetch","url","method","headers","body","JSON","stringify","NULL","ok","Error","data","json","applyData","setTasks","loadedTasks","err","message"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,OAAvB;;AAEA,eAAeC,OAAf,CAAuBC,aAAvB,EAAsCC,QAAtC,EAAgD;AAAA;;AAC9C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMQ,WAAW,GAAG,MAAOC,QAAP,IAAoB;AACtCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AAEA,QAAI;AACF,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACT,aAAa,CAACU,GAAf,EAAoB;AAC9CC,QAAAA,MAAM,EAAEX,aAAa,CAACW,MAAd,GAAuBX,aAAa,CAACW,MAArC,GAA8C,KADR;AAE9CC,QAAAA,OAAO,EAAEZ,aAAa,CAACY,OAAd,GAAwBZ,aAAa,CAACY,OAAtC,GAAgD,EAFX;AAG9CC,QAAAA,IAAI,EAAEb,aAAa,CAACa,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAef,aAAa,CAACa,IAA7B,CAArB,GAA0DG;AAHlB,OAApB,CAA5B;;AAMA,UAAI,CAACR,QAAQ,CAACS,EAAd,EAAkB;AAAE,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AAAqC;;AAEzD,YAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAAnB;AAEAC,MAAAA,SAAS,CAACF,IAAD,CAAT;AAEAG,MAAAA,QAAQ,CAACC,WAAD,CAAR;AAED,KAfD,CAeE,OAAOC,GAAP,EAAY;AACZnB,MAAAA,QAAQ,CAACmB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDtB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAvBD,CAJ8C,CA2B5C;;;AAEF,SAAM;AACJD,IAAAA,SADI;AAEJE,IAAAA,KAFI;AAGJE,IAAAA;AAHI,GAAN;AAKD;;GAlCcP,O;;AAoCf,eAAeA,OAAf,C,CAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {useState} from 'react';\r\n\r\nasync function useHttp(requestConfig, appyData) {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const sendRequest = async (taskText) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await fetch(requestConfig.url, {\r\n        method: requestConfig.method ? requestConfig.method : 'GET',\r\n        headers: requestConfig.headers ? requestConfig.headers : {},\r\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : NULL,\r\n      });\r\n\r\n      if (!response.ok) { throw new Error('Request failed!'); }\r\n\r\n      const data = await response.json();\r\n\r\n      applyData(data);\r\n\r\n      setTasks(loadedTasks);\r\n\r\n    } catch (err) {\r\n      setError(err.message || 'Something went wrong!');\r\n    }\r\n    setIsLoading(false);\r\n  };//close 'sendRequest\r\n\r\n  return{\r\n    isLoading,\r\n    error,\r\n    sendRequest,\r\n  };\r\n}\r\n\r\nexport default useHttp;\r\n\r\n\r\n\r\n// try {\r\n    \r\n    \r\n//   //fetch tasks\r\n//   const response = await fetch( \"https://react-http-c0588-default-rtdb.firebaseio.com/tasks.json\" );\r\n//   //check status\r\n//   if (response.status !== 200) {\r\n//     throw new Error(\"failed to GET tasks\");\r\n//   }\r\n//   const data = await response.json();\r\n\r\n//   const loadedTasks = [];\r\n\r\n//   for (const taskKey in data) {\r\n//     loadedTasks.push({ id: taskKey, text: data[taskKey].text });\r\n//   }\r\n\r\n//   return {\r\n//     tasks: loadedTasks,\r\n//     error: null  \r\n//   }\r\n\r\n// } catch (err) {\r\n//   return {\r\n//     tasks: task,\r\n//     error: err\r\n//   }\r\n// }\r\n// }\r\n// ,\r\n// (verb === \"GET\" ? {} : { method: 'POST', body: JSON.stringify(task), headers: {'Content-Type': 'application/json' }})\r\n// );\r\n"]},"metadata":{},"sourceType":"module"}