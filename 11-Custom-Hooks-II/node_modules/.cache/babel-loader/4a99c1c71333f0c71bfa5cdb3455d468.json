{"ast":null,"code":"async function useFetch() {\n  const getVersion = async (setTasks, setError) => {\n    try {\n      const response = await fetch(\"https://react-http-c0588-default-rtdb.firebaseio.com/tasks.json\");\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      const loadedTasks = [];\n\n      for (const taskKey in data) {\n        loadedTasks.push({\n          id: taskKey,\n          text: data[taskKey].text\n        });\n      }\n\n      setTasks(loadedTasks);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n  };\n\n  const postVersion = () => {};\n\n  return getVersion;\n}\n\n;\nexport default useFetch; // try {\n//   //fetch tasks\n//   const response = await fetch( \"https://react-http-c0588-default-rtdb.firebaseio.com/tasks.json\" );\n//   //check status\n//   if (response.status !== 200) {\n//     throw new Error(\"failed to GET tasks\");\n//   }\n//   const data = await response.json();\n//   const loadedTasks = [];\n//   for (const taskKey in data) {\n//     loadedTasks.push({ id: taskKey, text: data[taskKey].text });\n//   }\n//   return {\n//     tasks: loadedTasks,\n//     error: null  \n//   }\n// } catch (err) {\n//   return {\n//     tasks: task,\n//     error: err\n//   }\n// }\n// }\n// ,\n// (verb === \"GET\" ? {} : { method: 'POST', body: JSON.stringify(task), headers: {'Content-Type': 'application/json' }})\n// );","map":{"version":3,"sources":["D:/Dev/React/11-Custom-Hooks-II/src/hooks/useHTTP.js.js"],"names":["useFetch","getVersion","setTasks","setError","response","fetch","ok","Error","data","json","loadedTasks","taskKey","push","id","text","err","message","postVersion"],"mappings":"AAAA,eAAeA,QAAf,GAA0B;AAExB,QAAMC,UAAU,GAAG,OAAQC,QAAR,EAAkBC,QAAlB,KAA+B;AAChD,QAAG;AACD,YAAMC,QAAQ,GAAE,MAAMC,KAAK,CAAE,iEAAF,CAA3B;;AACA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AACD,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACA,YAAMC,WAAW,GAAG,EAApB;;AACA,WAAK,MAAMC,OAAX,IAAsBH,IAAtB,EAA4B;AAC1BE,QAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEC,UAAAA,EAAE,EAAEF,OAAN;AAAeG,UAAAA,IAAI,EAAEN,IAAI,CAACG,OAAD,CAAJ,CAAcG;AAAnC,SAAjB;AACD;;AAEDZ,MAAAA,QAAQ,CAACQ,WAAD,CAAR;AACD,KAZD,CAYE,OAAOK,GAAP,EAAY;AACZZ,MAAAA,QAAQ,CAACY,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;AACF,GAhBD;;AAkBA,QAAMC,WAAW,GAAG,MAAM,CAAE,CAA5B;;AAEA,SAAOhB,UAAP;AACD;;AAAA;AAED,eAAeD,QAAf,C,CAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["async function useFetch() {\r\n\r\n  const getVersion = async ( setTasks, setError) => {\r\n    try{\r\n      const response =await fetch( \"https://react-http-c0588-default-rtdb.firebaseio.com/tasks.json\" );\r\n      if (!response.ok) {\r\n        throw new Error('Request failed!');\r\n      }\r\n      const data = await response.json();\r\n      const loadedTasks = [];\r\n      for (const taskKey in data) {\r\n        loadedTasks.push({ id: taskKey, text: data[taskKey].text });\r\n      }\r\n\r\n      setTasks(loadedTasks);\r\n    } catch (err) {\r\n      setError(err.message || 'Something went wrong!');\r\n    }\r\n  }\r\n\r\n  const postVersion = () => {};\r\n\r\n  return getVersion;\r\n};\r\n\r\nexport default useFetch;\r\n\r\n\r\n\r\n// try {\r\n    \r\n    \r\n//   //fetch tasks\r\n//   const response = await fetch( \"https://react-http-c0588-default-rtdb.firebaseio.com/tasks.json\" );\r\n//   //check status\r\n//   if (response.status !== 200) {\r\n//     throw new Error(\"failed to GET tasks\");\r\n//   }\r\n//   const data = await response.json();\r\n\r\n//   const loadedTasks = [];\r\n\r\n//   for (const taskKey in data) {\r\n//     loadedTasks.push({ id: taskKey, text: data[taskKey].text });\r\n//   }\r\n\r\n//   return {\r\n//     tasks: loadedTasks,\r\n//     error: null  \r\n//   }\r\n\r\n// } catch (err) {\r\n//   return {\r\n//     tasks: task,\r\n//     error: err\r\n//   }\r\n// }\r\n// }\r\n// ,\r\n// (verb === \"GET\" ? {} : { method: 'POST', body: JSON.stringify(task), headers: {'Content-Type': 'application/json' }})\r\n// );\r\n"]},"metadata":{},"sourceType":"module"}