{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dev\\\\React\\\\12-working-with-forms-and-input\\\\src\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    isValid: nameIsValid,\n    vlaueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetName\n  } = useInput(x => {\n    return x.trim() !== \"\";\n  });\n  const {\n    value: enteredEmail,\n    hasError: emailInputHasError,\n    isValid: emailIsValid,\n    vlaueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmail\n  } = useInput(x => {\n    return x.trim().includes('@');\n  }); // const [enteredName, setEnteredName] = useState('');\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  // const enteredNameIsValid = enteredName.trim() !== \"\";\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  // const enteredEmailIsValid = enteredEmail.trim() !== \"\" && enteredEmail.includes(\"@\");\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (nameIsValid && emailIsValid) {\n    formIsValid = true;\n  } // const nameInputChangeHandler = (event) => {\n  //   setEnteredName(event.target.value);\n  // };\n  // const emailInputChangeHandler = (event) => {\n  //   setEnteredEmail(event.target.value);\n  // };\n  // const nameInputBlurHandler = (event) => {\n  //   setEnteredNameTouched(true);\n  // };\n  // const emailInputBlurHandler = (event) => {\n  //   setEnteredEmailTouched(true);\n  // };\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    if (!nameIsValid || !emailIsValid) {\n      return;\n    }\n\n    console.log(enteredName); // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n\n    resetName();\n    resetEmail();\n  };\n\n  const nameInputClasses = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputHasError ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"eamil\",\n        id: \"email\",\n        onChange: emailChangeHandler,\n        onBlur: emailBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), emailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"email must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"zfRzBsYr4ANaS3EfB6Tqurvvjsg=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["D:/Dev/React/12-working-with-forms-and-input/src/src/components/SimpleInput.js"],"names":["useInput","SimpleInput","props","value","enteredName","hasError","nameInputHasError","isValid","nameIsValid","vlaueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","reset","resetName","x","trim","enteredEmail","emailInputHasError","emailIsValid","emailChangeHandler","emailBlurHandler","resetEmail","includes","formIsValid","formSubmissionHandler","event","preventDefault","console","log","nameInputClasses","emailInputClasses"],"mappings":"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","sourcesContent":["import useInput from \"../hooks/use-input\";\r\n\r\nconst SimpleInput = (props) => {\r\n  const {\r\n    value: enteredName,\r\n    hasError: nameInputHasError,\r\n    isValid: nameIsValid,\r\n    vlaueChangeHandler: nameChangeHandler,\r\n    inputBlurHandler: nameBlurHandler,\r\n    reset: resetName,\r\n  } = useInput(x => { return x.trim() !== \"\" });\r\n\r\n  const {\r\n    value: enteredEmail,\r\n    hasError: emailInputHasError,\r\n    isValid: emailIsValid,\r\n    vlaueChangeHandler: emailChangeHandler,\r\n    inputBlurHandler: emailBlurHandler,\r\n    reset: resetEmail,\r\n  } = useInput(x => { return x.trim().includes('@') });\r\n\r\n  // const [enteredName, setEnteredName] = useState('');\r\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\r\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\r\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\r\n\r\n  // const enteredNameIsValid = enteredName.trim() !== \"\";\r\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\r\n\r\n  // const enteredEmailIsValid = enteredEmail.trim() !== \"\" && enteredEmail.includes(\"@\");\r\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\r\n\r\n  let formIsValid = false;\r\n\r\n  if (nameIsValid && emailIsValid) {\r\n    formIsValid = true;\r\n  }\r\n\r\n  // const nameInputChangeHandler = (event) => {\r\n  //   setEnteredName(event.target.value);\r\n  // };\r\n  // const emailInputChangeHandler = (event) => {\r\n  //   setEnteredEmail(event.target.value);\r\n  // };\r\n\r\n  // const nameInputBlurHandler = (event) => {\r\n  //   setEnteredNameTouched(true);\r\n  // };\r\n  // const emailInputBlurHandler = (event) => {\r\n  //   setEnteredEmailTouched(true);\r\n  // };\r\n\r\n  const formSubmissionHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!nameIsValid || !emailIsValid) {\r\n      return;\r\n    }\r\n\r\n    console.log(enteredName);\r\n\r\n    // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\r\n    resetName();\r\n    resetEmail();\r\n  \r\n  };\r\n\r\n  const nameInputClasses = nameInputHasError\r\n    ? \"form-control invalid\"\r\n    : \"form-control\";\r\n\r\n  const emailInputClasses = emailInputHasError\r\n  ? \"form-control invalid\"\r\n  : \"form-control\";\r\n\r\n  return (\r\n    <form onSubmit={formSubmissionHandler}>\r\n      <div className={nameInputClasses}>\r\n        <label htmlFor=\"name\">Your Name</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"name\"\r\n          onChange={nameChangeHandler}\r\n          onBlur={nameBlurHandler}\r\n          value={enteredName}\r\n        />\r\n        {nameInputHasError && (\r\n          <p className=\"error-text\">Name must not be empty.</p>\r\n        )}\r\n      </div>\r\n\r\n      <div className={emailInputClasses}>\r\n        <label htmlFor=\"email\">Your Email</label>\r\n        <input\r\n          type=\"eamil\"\r\n          id=\"email\"\r\n          onChange={emailChangeHandler}\r\n          onBlur={emailBlurHandler}\r\n          value={enteredEmail}\r\n        />\r\n        {emailInputHasError && (\r\n          <p className=\"error-text\">email must not be empty.</p>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"form-actions\">\r\n        <button disabled={!formIsValid}>Submit</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SimpleInput;\r\n"]},"metadata":{},"sourceType":"module"}