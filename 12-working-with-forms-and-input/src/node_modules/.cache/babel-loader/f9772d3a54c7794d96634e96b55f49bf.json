{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useInput = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setisTouched] = useState(false);\n  const ValueIsValid = validateValue(enteredValue);\n  const hasError = !ValueIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = event => {\n    setIsTouched(true);\n  };\n\n  return {\n    vlaue: enteredValue,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler\n  };\n};\n\n_s(useInput, \"kI2BRn8bvzROLXmTrKKPIapc85o=\");\n\nexport default useInput;","map":{"version":3,"sources":["D:/Dev/React/12-working-with-forms-and-input/src/src/hooks/use-input.js"],"names":["useState","useInput","validateValue","enteredValue","setEnteredValue","isTouched","setisTouched","ValueIsValid","hasError","valueChangeHandler","event","target","value","inputBlurHandler","setIsTouched","vlaue"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAClC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMO,YAAY,GAAGL,aAAa,CAACC,YAAD,CAAlC;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC;;AAEA,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AACpCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACD,GAFD;;AAIA,QAAMC,gBAAgB,GAAIH,KAAD,IAAW;AAClCI,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAIA,SAAO;AACHC,IAAAA,KAAK,EAAEZ,YADJ;AACkBK,IAAAA,QADlB;AAC4BC,IAAAA,kBAD5B;AACgDI,IAAAA;AADhD,GAAP;AAGD,CAlBD;;GAAMZ,Q;;AAoBN,eAAeA,QAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useInput = (validateValue) => {\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  const [isTouched, setisTouched] = useState(false);\r\n\r\n  const ValueIsValid = validateValue(enteredValue);\r\n  const hasError = !ValueIsValid && isTouched;\r\n\r\n  const valueChangeHandler = (event) => {\r\n    setEnteredValue(event.target.value);\r\n  };\r\n  \r\n  const inputBlurHandler = (event) => {\r\n    setIsTouched(true);\r\n  };\r\n  \r\n  return {\r\n      vlaue: enteredValue, hasError, valueChangeHandler, inputBlurHandler\r\n  }\r\n};\r\n\r\nexport default useInput;\r\n"]},"metadata":{},"sourceType":"module"}