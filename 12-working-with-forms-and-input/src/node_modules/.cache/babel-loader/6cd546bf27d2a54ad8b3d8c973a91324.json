{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dev\\\\React\\\\12-working-with-forms-and-input\\\\src\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    vlaueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler\n  } = useInput(x => {\n    return x.trim() !== \"\";\n  });\n  const {\n    value: enteredEmail,\n    hasError: EmailInputHasError,\n    vlaueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler\n  } = useInput(x => {\n    return x.trim().includes('@');\n  }); // const [enteredName, setEnteredName] = useState('');\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  // const enteredNameIsValid = enteredName.trim() !== \"\";\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  // const enteredEmailIsValid = enteredEmail.trim() !== \"\" && enteredEmail.includes(\"@\");\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(enteredName); // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n\n    setEnteredName(\"\");\n    setEnteredNameTouched(false);\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"eamil\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"email must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"14IY8lR/6AFjiOCaMJN0NvRfiRM=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["D:/Dev/React/12-working-with-forms-and-input/src/src/components/SimpleInput.js"],"names":["useState","useInput","SimpleInput","props","value","enteredName","hasError","nameInputHasError","vlaueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","x","trim","enteredEmail","EmailInputHasError","emailChangeHandler","emailBlurHandler","includes","formIsValid","enteredNameIsValid","enteredEmailIsValid","nameInputChangeHandler","event","setEnteredName","target","emailInputChangeHandler","setEnteredEmail","nameInputBlurHandler","setEnteredNameTouched","emailInputBlurHandler","setEnteredEmailTouched","formSubmissionHandler","preventDefault","console","log","nameInputClasses","nameInputIsInvalid","emailInputClasses","emailInputIsInvalid"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport useInput from \"../hooks/use-input\";\r\n\r\nconst SimpleInput = (props) => {\r\n  const {\r\n    value: enteredName,\r\n    hasError: nameInputHasError,\r\n    vlaueChangeHandler: nameChangeHandler,\r\n    inputBlurHandler: nameBlurHandler,\r\n  } = useInput(x => { return x.trim() !== \"\" });\r\n\r\n  const {\r\n    value: enteredEmail,\r\n    hasError: EmailInputHasError,\r\n    vlaueChangeHandler: emailChangeHandler,\r\n    inputBlurHandler: emailBlurHandler,\r\n  } = useInput(x => { return x.trim().includes('@') });\r\n\r\n  // const [enteredName, setEnteredName] = useState('');\r\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\r\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\r\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\r\n\r\n  // const enteredNameIsValid = enteredName.trim() !== \"\";\r\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\r\n\r\n  // const enteredEmailIsValid = enteredEmail.trim() !== \"\" && enteredEmail.includes(\"@\");\r\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\r\n\r\n  let formIsValid = false;\r\n\r\n  if (enteredNameIsValid && enteredEmailIsValid) {\r\n    formIsValid = true;\r\n  }\r\n\r\n  const nameInputChangeHandler = (event) => {\r\n    setEnteredName(event.target.value);\r\n  };\r\n  const emailInputChangeHandler = (event) => {\r\n    setEnteredEmail(event.target.value);\r\n  };\r\n\r\n  const nameInputBlurHandler = (event) => {\r\n    setEnteredNameTouched(true);\r\n  };\r\n  const emailInputBlurHandler = (event) => {\r\n    setEnteredEmailTouched(true);\r\n  };\r\n\r\n  const formSubmissionHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (!enteredNameIsValid || !enteredEmailIsValid) {\r\n      return;\r\n    }\r\n\r\n    console.log(enteredName);\r\n\r\n    // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\r\n    setEnteredName(\"\");\r\n    setEnteredNameTouched(false);\r\n\r\n    setEnteredEmail(\"\");\r\n    setEnteredEmailTouched(false);\r\n  };\r\n\r\n  const nameInputClasses = nameInputIsInvalid\r\n    ? \"form-control invalid\"\r\n    : \"form-control\";\r\n  const emailInputClasses = emailInputIsInvalid\r\n    ? \"form-control invalid\"\r\n    : \"form-control\";\r\n\r\n  return (\r\n    <form onSubmit={formSubmissionHandler}>\r\n      <div className={nameInputClasses}>\r\n        <label htmlFor=\"name\">Your Name</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"name\"\r\n          onChange={nameInputChangeHandler}\r\n          onBlur={nameInputBlurHandler}\r\n          value={enteredName}\r\n        />\r\n        {nameInputIsInvalid && (\r\n          <p className=\"error-text\">Name must not be empty.</p>\r\n        )}\r\n      </div>\r\n\r\n      <div className={emailInputClasses}>\r\n        <label htmlFor=\"email\">Your Email</label>\r\n        <input\r\n          type=\"eamil\"\r\n          id=\"email\"\r\n          onChange={emailInputChangeHandler}\r\n          onBlur={emailInputBlurHandler}\r\n          value={enteredEmail}\r\n        />\r\n        {emailInputIsInvalid && (\r\n          <p className=\"error-text\">email must not be empty.</p>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"form-actions\">\r\n        <button disabled={!formIsValid}>Submit</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SimpleInput;\r\n"]},"metadata":{},"sourceType":"module"}