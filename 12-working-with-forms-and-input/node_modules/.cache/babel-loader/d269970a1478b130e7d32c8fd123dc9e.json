{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dev\\\\React\\\\12-working-with-forms-and-input\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredanameTouched] = useState(false);\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n    setEnteredanameTouched(true); // validateInput(event.target.value);\n    // (event.target.value.trim() !== '') ? setEnteredNameIsValid(true) : setEnteredNameIsValid(false);\n\n    if (event.target.value.trim() !== '') {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const validateInput = value => {\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return false;\n    }\n\n    setEnteredNameIsValid(true);\n    return true;\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredanameTouched(true); // validateInput(event.target.value);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return false;\n    }\n\n    setEnteredNameIsValid(true);\n    return true;\n    console.log(enteredName);\n    setEnteredName('');\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        value: enteredName,\n        onBlur: validateInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"name must not be blank\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 32\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"tcnW+Z17PMk0h2x6lyvky/qPRY8=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["D:/Dev/React/12-working-with-forms-and-input/src/components/SimpleInput.js"],"names":["useState","SimpleInput","props","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredanameTouched","nameInputIsInvalid","nameInputChangeHandler","event","target","value","trim","validateInput","formSubmissionHandler","preventDefault","console","log","nameInputClasses"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACO,kBAAD,EAAqBC,sBAArB,IAA+CR,QAAQ,CAAC,KAAD,CAA7D;AAEA,QAAMS,kBAAkB,GAAG,CAACJ,kBAAD,IAAuBE,kBAAlD;;AAEA,QAAMG,sBAAsB,GAAIC,KAAD,IAAW;AACxCP,IAAAA,cAAc,CAACO,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACAL,IAAAA,sBAAsB,CAAC,IAAD,CAAtB,CAFwC,CAIxC;AAEA;;AACA,QAAGG,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,OAA8B,EAAjC,EAAqC;AAAER,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AAA6B;AACrE,GARD;;AAUA,QAAMS,aAAa,GAAIF,KAAD,IAAW;AAE/B,QAAGV,WAAW,CAACW,IAAZ,OAAuB,EAA1B,EAA6B;AAACR,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AAA8B,aAAO,KAAP;AAAc;;AAC1EA,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AAA6B,WAAO,IAAP;AAC9B,GAJD;;AAMA,QAAMU,qBAAqB,GAAGL,KAAK,IAAI;AACrCA,IAAAA,KAAK,CAACM,cAAN;AACAT,IAAAA,sBAAsB,CAAC,IAAD,CAAtB,CAFqC,CAIrC;;AAEA,QAAGL,WAAW,CAACW,IAAZ,OAAuB,EAA1B,EAA6B;AAACR,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AAA8B,aAAO,KAAP;AAAc;;AAC1EA,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AAA6B,WAAO,IAAP;AAE7BY,IAAAA,OAAO,CAACC,GAAR,CAAYhB,WAAZ;AACAC,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAXD;;AAaA,QAAMgB,gBAAgB,GAAGX,kBAAkB,GAAG,sBAAH,GAA4B,cAAvE;AAEA,sBACE;AAAM,IAAA,QAAQ,EAAEO,qBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEI,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,MAAtB;AAA6B,QAAA,QAAQ,EAAEV,sBAAvC;AAA+D,QAAA,KAAK,EAAEP,WAAtE;AAAmF,QAAA,MAAM,EAAEY;AAA3F;AAAA;AAAA;AAAA;AAAA,cAFF,EAGGN,kBAAkB,iBAAI;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHzB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAlDD;;GAAMR,W;;KAAAA,W;AAoDN,eAAeA,WAAf","sourcesContent":["import { useState } from 'react';\r\n\r\nconst SimpleInput = (props) => {\r\n  const [enteredName, setEnteredName] = useState('');\r\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\r\n  const [enteredNameTouched, setEnteredanameTouched] = useState(false);\r\n\r\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\r\n\r\n  const nameInputChangeHandler = (event) => {\r\n    setEnteredName(event.target.value);\r\n    setEnteredanameTouched(true);\r\n    \r\n    // validateInput(event.target.value);\r\n    \r\n    // (event.target.value.trim() !== '') ? setEnteredNameIsValid(true) : setEnteredNameIsValid(false);\r\n    if(event.target.value.trim() !== '') { setEnteredNameIsValid(true) }\r\n  };\r\n\r\n  const validateInput = (value) => {\r\n    \r\n    if(enteredName.trim() === ''){setEnteredNameIsValid(false); return false;}\r\n    setEnteredNameIsValid(true); return true; \r\n  }\r\n\r\n  const formSubmissionHandler = event => {\r\n    event.preventDefault();\r\n    setEnteredanameTouched(true);\r\n\r\n    // validateInput(event.target.value);\r\n\r\n    if(enteredName.trim() === ''){setEnteredNameIsValid(false); return false;}\r\n    setEnteredNameIsValid(true); return true; \r\n\r\n    console.log(enteredName);\r\n    setEnteredName('');\r\n  }\r\n  \r\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\r\n\r\n  return (\r\n    <form onSubmit={formSubmissionHandler}>\r\n      <div className={nameInputClasses}>\r\n        <label htmlFor='name'>Your Name</label>\r\n        <input type='text' id='name' onChange={nameInputChangeHandler} value={enteredName} onBlur={validateInput}/>\r\n        {nameInputIsInvalid && <p className='error-text'>name must not be blank</p>}\r\n      </div>\r\n      <div className=\"form-actions\">\r\n        <button>Submit</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SimpleInput;\r\n"]},"metadata":{},"sourceType":"module"}