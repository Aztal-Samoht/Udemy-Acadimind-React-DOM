{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addItemToCart(state, action) {\n      console.log(\"add to cart reached\");\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n\n      if (!existingItem) {\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const existingItem = state.items.find(item => item.id === action.payload);\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== action.payload.id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n});\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["D:/Dev/React/15-advanced-redux/src/store/cart-slice.js"],"names":["createSlice","initialState","items","totalQuantity","cartSlice","name","reducers","addItemToCart","state","action","console","log","newItem","payload","existingItem","find","item","id","push","itemId","price","quantity","totalPrice","title","removeItemFromCart","filter","cartActions","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,aAAa,EAAE;AAFE,CAArB;AAKA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;AAC1BK,EAAAA,IAAI,EAAE,MADoB;AAE1BJ,EAAAA,YAF0B;AAG1BK,EAAAA,QAAQ,EAAC;AACLC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAe;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,YAAMC,OAAO,GAAGH,MAAM,CAACI,OAAvB;AACA,YAAMC,YAAY,GAAGN,KAAK,CAACN,KAAN,CAAYa,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA7C,CAArB;;AACA,UAAG,CAACH,YAAJ,EAAiB;AACbN,QAAAA,KAAK,CAACN,KAAN,CAAYgB,IAAZ,CAAiB;AACbC,UAAAA,MAAM,EAAEP,OAAO,CAACK,EADH;AAEbG,UAAAA,KAAK,EAAER,OAAO,CAACQ,KAFF;AAGbC,UAAAA,QAAQ,EAAE,CAHG;AAIbC,UAAAA,UAAU,EAAEV,OAAO,CAACQ,KAJP;AAKbf,UAAAA,IAAI,EAAEO,OAAO,CAACW;AALD,SAAjB;AAOH,OARD,MAQO;AACHT,QAAAA,YAAY,CAACO,QAAb;AACAP,QAAAA,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACQ,UAAb,GAA0BV,OAAO,CAACQ,KAA5D;AACH;AACJ,KAjBI;;AAkBLI,IAAAA,kBAAkB,CAAChB,KAAD,EAAQC,MAAR,EAAe;AAC7B,YAAMK,YAAY,GAAGN,KAAK,CAACN,KAAN,CAAYa,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACI,OAA5C,CAArB;;AACA,UAAIC,YAAY,CAACO,QAAb,KAA0B,CAA9B,EAAgC;AAC5Bb,QAAAA,KAAK,CAACN,KAAN,GAAcM,KAAK,CAACN,KAAN,CAAYuB,MAAZ,CAAmBT,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACI,OAAP,CAAeI,EAAtD,CAAd;AACH,OAFD,MAEO;AACHH,QAAAA,YAAY,CAACO,QAAb;AACAP,QAAAA,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACQ,UAAb,GAA0BR,YAAY,CAACM,KAAjE;AACH;AACJ;;AA1BI;AAHiB,CAAD,CAA7B;AAiCA,OAAO,MAAMM,WAAW,GAAGtB,SAAS,CAACuB,OAA9B;AAEP,eAAevB,SAAS,CAACwB,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    totalQuantity: 0,\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState,\r\n    reducers:{\r\n        addItemToCart(state, action){\r\n            console.log(\"add to cart reached\");\r\n            const newItem = action.payload;  \r\n            const existingItem = state.items.find(item => item.id === newItem.id);\r\n            if(!existingItem){\r\n                state.items.push({\r\n                    itemId: newItem.id, \r\n                    price: newItem.price,\r\n                    quantity: 1,\r\n                    totalPrice: newItem.price ,\r\n                    name: newItem.title\r\n                    });\r\n            } else {\r\n                existingItem.quantity++;\r\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\r\n            }\r\n        },\r\n        removeItemFromCart(state, action){\r\n            const existingItem = state.items.find(item => item.id === action.payload);\r\n            if (existingItem.quantity === 1){\r\n                state.items = state.items.filter(item => item.id !== action.payload.id)\r\n            } else {\r\n                existingItem.quantity--\r\n                existingItem.totalPrice = existingItem.totalPrice - existingItem.price\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nexport const cartActions = cartSlice.actions\r\n\r\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}