{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dev\\\\React\\\\09-HTTP-requests\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState\n/*useReducer , useRef,  useContext, useImperativeahandle, useMemo,*/\n} from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\"); //if (response.status < 200 || response.status > 299){\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map(film => {\n        return {\n          id: film.episode_id,\n          title: film.title,\n          releaseDate: film.release_date,\n          openingText: film.opening_crawl\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (anError) {\n      setError(anError.message);\n    }\n\n    setIsLoading(false);\n  }\n\n  async function badFetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://swapi.dev/api/film/\"); //if (response.status < 200 || response.status > 299){\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map(film => {\n        return {\n          id: film.episode_id,\n          title: film.title,\n          releaseDate: film.release_date,\n          openingText: film.opening_crawl\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (anError) {\n      setMovies({});\n      setError(anError.message);\n    }\n\n    setIsLoading(false);\n  }\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Nothin' to see here!, Move along!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 17\n  }, this);\n\n  if (error) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 24\n    }, this);\n  }\n\n  ;\n\n  if (movies.length < 1) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Nothin' to see here!, Move along!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 36\n    }, this);\n  }\n\n  ;\n\n  if (!isLoading && movies.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(MoviesList, {\n      movies: movies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 50\n    }, this);\n  }\n\n  ;\n\n  if (isLoading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loadin' it!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 28\n    }, this);\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: badFetchMoviesHandler,\n        children: \"Don't Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"gvvaxtNEH69eVRFSOgl7uh+ZsGU=\");\n\n_c = App;\nexport default App;\n/* ALTERNATIVE TO ASYNC KEYWORD\nuse .catch for error cases\n\nfunction fetchMoviesHandler() {\n    fetch('https://swapi.dev/api/films/')\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        const transformedMovies = data.results.map((movieData) => {\n          return {\n            id: movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.release_date,\n          };\n        });\n        setMovies(transformedMovies);\n      });\n  }\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Dev/React/09-HTTP-requests/src/App.js"],"names":["React","Fragment","useEffect","useState","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","film","id","episode_id","title","releaseDate","release_date","openingText","opening_crawl","anError","message","badFetchMoviesHandler","content","length"],"mappings":"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","sourcesContent":["import React, {\n  Fragment,\n  useEffect, useState /*useReducer , useRef,  useContext, useImperativeahandle, useMemo,*/,\n} from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect (() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n      //if (response.status < 200 || response.status > 299){\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map((film) => {\n        return {\n          id: film.episode_id,\n          title: film.title,\n          releaseDate: film.release_date,\n          openingText: film.opening_crawl,\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (anError) {\n      setError(anError.message);\n    }\n    setIsLoading(false);\n  }\n  async function badFetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://swapi.dev/api/film/\");\n      //if (response.status < 200 || response.status > 299){\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map((film) => {\n        return {\n          id: film.episode_id,\n          title: film.title,\n          releaseDate: film.release_date,\n          openingText: film.opening_crawl,\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (anError) {\n      setMovies({})\n      setError(anError.message);\n    }\n    setIsLoading(false);\n  }\n\n  let content = <p>Nothin' to see here!, Move along!</p>\n  if(error){ content = <p>{error}</p> };\n  if(movies.length < 1){ content = <p>Nothin' to see here!, Move along!</p> };\n  if(!isLoading && movies.length > 0){ content = <MoviesList movies={movies} /> };\n  if(isLoading){ content = <p>loadin' it!</p> };\n  \n  return (\n    <Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n        <button onClick={badFetchMoviesHandler}>Don't Fetch Movies</button>\n      </section>\n      <section>\n        {content}\n      </section>\n    </Fragment>\n  );\n}\n\nexport default App;\n\n/* ALTERNATIVE TO ASYNC KEYWORD\nuse .catch for error cases\n\nfunction fetchMoviesHandler() {\n    fetch('https://swapi.dev/api/films/')\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        const transformedMovies = data.results.map((movieData) => {\n          return {\n            id: movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.release_date,\n          };\n        });\n        setMovies(transformedMovies);\n      });\n  }\n*/\n"]},"metadata":{},"sourceType":"module"}