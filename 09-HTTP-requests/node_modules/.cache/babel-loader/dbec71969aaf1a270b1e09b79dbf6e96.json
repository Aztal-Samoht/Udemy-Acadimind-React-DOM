{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dev\\\\React\\\\09-HTTP-requests\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState\n/*useReducer , useRef, useEffect, useContext, useImperativeahandle, useMemo,*/\n} from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://swapi.dev/api/film/');\n      const data = await response.json(); //if (response.status < 200 || response.status > 299){\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const transformedMovies = data.results.map(film => {\n        return {\n          id: film.episode_id,\n          title: film.title,\n          releaseDate: film.release_date,\n          openingText: film.opening_crawl\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (anError) {\n      setError(anError.message);\n    }\n\n    setIsLoading(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMoviesHandler,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [!isLoading && movies.length > 0 && /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 45\n      }, this), !isLoading && error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 33\n      }, this), !isLoading && movies.length < 1 && !error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Nothin' to see here!, Move along!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 55\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"loadin' it!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"zuBJAn2dLkBMoQCfa8VUzB2Qvvo=\");\n\n_c = App;\nexport default App;\n/* ALTERNATIVE TO ASYNC KEYWORD\nuse .catch for error cases\n\nfunction fetchMoviesHandler() {\n    fetch('https://swapi.dev/api/films/')\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        const transformedMovies = data.results.map((movieData) => {\n          return {\n            id: movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.release_date,\n          };\n        });\n        setMovies(transformedMovies);\n      });\n  }\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Dev/React/09-HTTP-requests/src/App.js"],"names":["React","Fragment","useState","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","data","json","ok","Error","transformedMovies","results","map","film","id","episode_id","title","releaseDate","release_date","openingText","opening_crawl","anError","message","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,EAA4BC;AAAS;AAArC,OAA2H,OAA3H;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;;AAEA,iBAAeS,kBAAf,GAAoC;AAClCH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAA5B;AACA,YAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB,CAFE,CAIF;;AACA,UAAI,CAACH,QAAQ,CAACI,EAAd,EAAiB;AACf,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AAED;;AAED,YAAMC,iBAAiB,GAAGJ,IAAI,CAACK,OAAL,CAAaC,GAAb,CAAkBC,IAAD,IAAU;AACnD,eAAO;AACLC,UAAAA,EAAE,EAAED,IAAI,CAACE,UADJ;AAELC,UAAAA,KAAK,EAAEH,IAAI,CAACG,KAFP;AAGLC,UAAAA,WAAW,EAAEJ,IAAI,CAACK,YAHb;AAILC,UAAAA,WAAW,EAAEN,IAAI,CAACO;AAJb,SAAP;AAMD,OAPyB,CAA1B;AAQAtB,MAAAA,SAAS,CAACY,iBAAD,CAAT;AACD,KAnBD,CAmBE,OAAOW,OAAP,EAAgB;AAChBnB,MAAAA,QAAQ,CAACmB,OAAO,CAACC,OAAT,CAAR;AACD;;AACCtB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;;AAED,sBACE,QAAC,QAAD;AAAA,4BACE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEG,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA,iBACG,CAACJ,SAAD,IAAcF,MAAM,CAAC0B,MAAP,GAAgB,CAA9B,iBAAmC,QAAC,UAAD;AAAY,QAAA,MAAM,EAAE1B;AAApB;AAAA;AAAA;AAAA;AAAA,cADtC,EAEG,CAACE,SAAD,IAAcE,KAAd,iBAAuB;AAAA,kBAAIA,KAAK,CAACqB;AAAV;AAAA;AAAA;AAAA;AAAA,cAF1B,EAGG,CAACvB,SAAD,IAAcF,MAAM,CAAC0B,MAAP,GAAgB,CAA9B,IAAmC,CAACtB,KAApC,iBAA6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHhD,EAIGF,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJhB;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GA/CQH,G;;KAAAA,G;AAiDT,eAAeA,GAAf;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {  Fragment,  useState /*useReducer , useRef, useEffect, useContext, useImperativeahandle, useMemo,*/,} from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  async function fetchMoviesHandler() {\n    setIsLoading(true)\n    setError(null);\n    try {\n      const response = await fetch('https://swapi.dev/api/film/');\n      const data = await response.json();\n\n      //if (response.status < 200 || response.status > 299){\n      if (!response.ok){\n        throw new Error('Something went wrong!');\n\n      }\n\n      const transformedMovies = data.results.map((film) => {\n        return { \n          id: film.episode_id,\n          title: film.title,\n          releaseDate: film.release_date,\n          openingText: film.opening_crawl \n        };\n      });\n      setMovies(transformedMovies);\n    } catch (anError) {\n      setError(anError.message)\n    }\n      setIsLoading(false);\n  }\n\n  return (\n    <Fragment>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {!isLoading && error && <p>{error.message}</p>}\n        {!isLoading && movies.length < 1 && !error && <p>Nothin' to see here!, Move along!</p>}\n        {isLoading && <p>loadin' it!</p>}\n\n      </section>\n    </Fragment>\n  );\n}\n\nexport default App;\n\n\n\n\n/* ALTERNATIVE TO ASYNC KEYWORD\nuse .catch for error cases\n\nfunction fetchMoviesHandler() {\n    fetch('https://swapi.dev/api/films/')\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        const transformedMovies = data.results.map((movieData) => {\n          return {\n            id: movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.release_date,\n          };\n        });\n        setMovies(transformedMovies);\n      });\n  }\n*/"]},"metadata":{},"sourceType":"module"}