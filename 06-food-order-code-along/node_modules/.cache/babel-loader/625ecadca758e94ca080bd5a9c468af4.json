{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nimport URLs from \"../assets/URLs\";\n\nconst useHTTP = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const sendMeal = async data => {\n    try {\n      const responce = await fetch(URLs.meals, {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n\n      if (!responce.ok) {\n        throw new Error('failed to add meal');\n      }\n    } catch (e) {\n      setHasError(e.message || 'there was an error, but failed to collect message');\n    }\n  };\n\n  const getMeals = useCallback(async () => {\n    const availableMeals = [];\n\n    try {\n      const responce = await fetch(URLs.meals); // console.log('printing \\'responce\\': ');\n      // console.log(responce);\n\n      if (!responce.ok) {\n        throw new Error('failed to get available meals');\n      }\n\n      const data = await responce.json();\n\n      for (const mealKey in data) {\n        availableMeals.push({\n          id: mealKey,\n          name: data[mealKey].name,\n          description: data[mealKey].description,\n          price: data[mealKey].price\n        });\n      }\n    } catch (e) {\n      setHasError(e.message || 'there was an error, but failed to collect message');\n    }\n\n    console.log(availableMeals);\n    return availableMeals;\n  }, []);\n\n  const sendOrder = async () => {\n    setIsLoading(true);\n\n    try {//const responce = await fetch()\n    } catch {}\n  };\n\n  return {\n    isLoading,\n    hasError,\n    sendMeal,\n    getMeals,\n    sendOrder\n  };\n};\n\n_s(useHTTP, \"DAxUa5MAU0KkKyknxRe3ky0XNZg=\");\n\nexport default useHTTP;","map":{"version":3,"sources":["D:/Dev/React/06-food-order-code-along/src/hooks/useHTTP.js"],"names":["useState","useCallback","URLs","useHTTP","isLoading","setIsLoading","hasError","setHasError","sendMeal","data","responce","fetch","meals","method","headers","body","JSON","stringify","ok","Error","e","message","getMeals","availableMeals","json","mealKey","push","id","name","description","price","console","log","sendOrder"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,OAAOC,IAAP,MAAiB,gBAAjB;;AAEA,MAAMC,OAAO,GAAG,MAAK;AAAA;;AACjB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;;AAEA,QAAMQ,QAAQ,GAAG,MAAOC,IAAP,IAAgB;AAC9B,QAAG;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,IAAI,CAACU,KAAN,EAAa;AACrCC,QAAAA,MAAM,EAAE,MAD6B;AAErCC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAF4B;AAKrCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf;AAL+B,OAAb,CAA5B;;AAOA,UAAG,CAACC,QAAQ,CAACQ,EAAb,EAAgB;AAAE,cAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AAAuC;AACxD,KATF,CASG,OAAOC,CAAP,EAAU;AAAEb,MAAAA,WAAW,CAACa,CAAC,CAACC,OAAF,IAAa,mDAAd,CAAX;AAAgF;AACjG,GAXD;;AAaA,QAAMC,QAAQ,GAAGrB,WAAW,CAAC,YAAY;AACrC,UAAMsB,cAAc,GAAG,EAAvB;;AAEA,QAAG;AACC,YAAMb,QAAQ,GAAG,MAAMC,KAAK,CAACT,IAAI,CAACU,KAAN,CAA5B,CADD,CAGC;AACA;;AAEA,UAAG,CAACF,QAAQ,CAACQ,EAAb,EAAgB;AAAE,cAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AAAkD;;AAEpE,YAAMV,IAAI,GAAG,MAAMC,QAAQ,CAACc,IAAT,EAAnB;;AAEA,WAAK,MAAMC,OAAX,IAAsBhB,IAAtB,EAA4B;AACxBc,QAAAA,cAAc,CAACG,IAAf,CAAoB;AAChBC,UAAAA,EAAE,EAAEF,OADY;AAEhBG,UAAAA,IAAI,EAAEnB,IAAI,CAACgB,OAAD,CAAJ,CAAcG,IAFJ;AAGhBC,UAAAA,WAAW,EAAEpB,IAAI,CAACgB,OAAD,CAAJ,CAAcI,WAHX;AAIhBC,UAAAA,KAAK,EAAErB,IAAI,CAACgB,OAAD,CAAJ,CAAcK;AAJL,SAApB;AAMC;AACR,KAlBD,CAkBE,OAAOV,CAAP,EAAU;AAAEb,MAAAA,WAAW,CAACa,CAAC,CAACC,OAAF,IAAa,mDAAd,CAAX;AAAgF;;AAE9FU,IAAAA,OAAO,CAACC,GAAR,CAAYT,cAAZ;AACA,WAAOA,cAAP;AACH,GAzB2B,EAyBzB,EAzByB,CAA5B;;AA2BA,QAAMU,SAAS,GAAG,YAAY;AAC1B5B,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,QAAG,CACH;AACC,KAFD,CAEE,MAAM,CAAE;AACb,GALD;;AAOA,SAAM;AACFD,IAAAA,SADE;AAEFE,IAAAA,QAFE;AAGFE,IAAAA,QAHE;AAIFc,IAAAA,QAJE;AAKFW,IAAAA;AALE,GAAN;AAOH,CA1DD;;GAAM9B,O;;AA0DH,eAAeA,OAAf","sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport URLs from \"../assets/URLs\";\r\n\r\nconst useHTTP = () =>{\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [hasError, setHasError] = useState(false);\r\n\r\n    const sendMeal = async (data) => {\r\n       try{\r\n        const responce = await fetch(URLs.meals, {\r\n            method: 'POST',\r\n            headers: { \r\n                \"Content-Type\": \"application/json\" \r\n              },\r\n            body: JSON.stringify(data),\r\n        })\r\n        if(!responce.ok){ throw new Error('failed to add meal') }\r\n        } catch (e) { setHasError(e.message || 'there was an error, but failed to collect message'); }\r\n    }\r\n    \r\n    const getMeals = useCallback(async () => {\r\n        const availableMeals = []\r\n\r\n        try{\r\n            const responce = await fetch(URLs.meals);\r\n            \r\n            // console.log('printing \\'responce\\': ');\r\n            // console.log(responce);\r\n\r\n            if(!responce.ok){ throw new Error('failed to get available meals') }\r\n\r\n            const data = await responce.json();\r\n\r\n            for (const mealKey in data) {\r\n                availableMeals.push({\r\n                    id: mealKey,\r\n                    name: data[mealKey].name,\r\n                    description: data[mealKey].description,\r\n                    price: data[mealKey].price\r\n                    })\r\n                }   \r\n        } catch (e) { setHasError(e.message || 'there was an error, but failed to collect message'); }\r\n    \r\n        console.log(availableMeals);\r\n        return availableMeals;\r\n    }, []);\r\n\r\n    const sendOrder = async () => {\r\n        setIsLoading(true);\r\n        try{\r\n        //const responce = await fetch()\r\n        } catch {}\r\n    }    \r\n    \r\n    return{\r\n        isLoading,\r\n        hasError,\r\n        sendMeal, \r\n        getMeals,\r\n        sendOrder\r\n    }\r\n}; export default useHTTP;"]},"metadata":{},"sourceType":"module"}