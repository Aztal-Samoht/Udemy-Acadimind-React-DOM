{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dev\\\\React\\\\06-food-order-code-along\\\\src\\\\components\\\\Meals\\\\AvailableMeals\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport Card from \"../../UI/Card/Card\";\nimport MealItem from \"../MealItem/MealItem\";\nimport classes from \"./AvailableMeals.module.css\";\nimport DUMMY_MEALS from \"../../../assets/DUMMY_MEALS \";\nimport useHTTP from \"../../../hooks/useHTTP\";\nimport { useCallback, useState } from \"react\";\nimport URLs from \"../../../assets/URLs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = () => {\n  _s();\n\n  // const request = useHTTP();\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [meals, setMeals] = useState(false);\n  const getMeals = useCallback(async () => {\n    setIsLoading(true);\n    setHasError(false);\n    const loadedMeals = [];\n\n    try {\n      const responce = await fetch(URLs.meals);\n\n      if (!responce.ok) {\n        throw new Error(\"failed to get available meals\");\n      }\n\n      const data = await responce.json();\n\n      for (const mealKey in data) {\n        loadedMeals.push({\n          id: mealKey,\n          name: data[mealKey].name,\n          description: data[mealKey].description,\n          price: data[mealKey].price\n        });\n      }\n\n      setMeals(loadedMeals);\n    } catch (e) {\n      setHasError(e.message || \"there was an error, but failed to collect message\");\n    }\n\n    setIsLoading(false);\n    return availableMeals;\n  }, []);\n  const mealsList = meals.map(x => {\n    return /*#__PURE__*/_jsxDEV(MealItem, {\n      data: x\n    }, x.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this);\n  }); // const mealsList = []\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: mealsList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AvailableMeals, \"TN2wZ+GDUSBy1ooYXFMfDaSuWhY=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["D:/Dev/React/06-food-order-code-along/src/components/Meals/AvailableMeals/AvailableMeals.js"],"names":["Card","MealItem","classes","DUMMY_MEALS","useHTTP","useCallback","useState","URLs","AvailableMeals","isLoading","setIsLoading","hasError","setHasError","meals","setMeals","getMeals","loadedMeals","responce","fetch","ok","Error","data","json","mealKey","push","id","name","description","price","e","message","availableMeals","mealsList","map","x"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,oBAAjB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,OAAOC,IAAP,MAAiB,sBAAjB;;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B;AAEA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,KAAD,CAAlC;AAEA,QAAMS,QAAQ,GAAGV,WAAW,CAAC,YAAY;AACvCK,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,WAAW,CAAC,KAAD,CAAX;AACA,UAAMI,WAAW,GAAG,EAApB;;AAEA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACX,IAAI,CAACM,KAAN,CAA5B;;AACA,UAAI,CAACI,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AAEA,WAAK,MAAMC,OAAX,IAAsBF,IAAtB,EAA4B;AAC1BL,QAAAA,WAAW,CAACQ,IAAZ,CAAiB;AACfC,UAAAA,EAAE,EAAEF,OADW;AAEfG,UAAAA,IAAI,EAAEL,IAAI,CAACE,OAAD,CAAJ,CAAcG,IAFL;AAGfC,UAAAA,WAAW,EAAEN,IAAI,CAACE,OAAD,CAAJ,CAAcI,WAHZ;AAIfC,UAAAA,KAAK,EAAEP,IAAI,CAACE,OAAD,CAAJ,CAAcK;AAJN,SAAjB;AAMD;;AACDd,MAAAA,QAAQ,CAACE,WAAD,CAAR;AAED,KAlBD,CAkBE,OAAOa,CAAP,EAAU;AACVjB,MAAAA,WAAW,CACTiB,CAAC,CAACC,OAAF,IAAa,mDADJ,CAAX;AAGD;;AAEDpB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,WAAOqB,cAAP;AACD,GA/B2B,EA+BzB,EA/ByB,CAA5B;AAiCA,QAAMC,SAAS,GAAGnB,KAAK,CAACoB,GAAN,CAAWC,CAAD,IAAO;AACjC,wBAAO,QAAC,QAAD;AAAqB,MAAA,IAAI,EAAEA;AAA3B,OAAeA,CAAC,CAACT,EAAjB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFiB,CAAlB,CAxC2B,CA2C3B;;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAEvB,OAAO,CAACW,KAAzB;AAAA,2BACE;AAAA,gBAAKmB;AAAL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAlDD;;GAAMxB,c;;KAAAA,c;AAoDN,eAAeA,cAAf","sourcesContent":["import Card from \"../../UI/Card/Card\";\r\nimport MealItem from \"../MealItem/MealItem\";\r\nimport classes from \"./AvailableMeals.module.css\";\r\nimport DUMMY_MEALS from \"../../../assets/DUMMY_MEALS \";\r\nimport useHTTP from \"../../../hooks/useHTTP\";\r\nimport { useCallback, useState } from \"react\";\r\nimport URLs from \"../../../assets/URLs\";\r\n\r\nconst AvailableMeals = () => {\r\n  // const request = useHTTP();\r\n  \r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [hasError, setHasError] = useState(false);\r\n  const [meals, setMeals] = useState(false);\r\n  \r\n  const getMeals = useCallback(async () => {\r\n    setIsLoading(true);\r\n    setHasError(false);\r\n    const loadedMeals = [];\r\n\r\n    try {\r\n      const responce = await fetch(URLs.meals);\r\n      if (!responce.ok) {\r\n        throw new Error(\"failed to get available meals\");\r\n      }\r\n\r\n      const data = await responce.json();\r\n\r\n      for (const mealKey in data) {\r\n        loadedMeals.push({\r\n          id: mealKey,\r\n          name: data[mealKey].name,\r\n          description: data[mealKey].description,\r\n          price: data[mealKey].price,\r\n        });\r\n      }\r\n      setMeals(loadedMeals)\r\n\r\n    } catch (e) {\r\n      setHasError(\r\n        e.message || \"there was an error, but failed to collect message\"\r\n      );\r\n    }\r\n\r\n    setIsLoading(false);\r\n    return availableMeals;\r\n  }, []);\r\n\r\n  const mealsList = meals.map((x) => {\r\n    return <MealItem key={x.id} data={x} />;\r\n  });\r\n  // const mealsList = []\r\n\r\n  return (\r\n    <Card className={classes.meals}>\r\n      <ul>{mealsList}</ul>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default AvailableMeals;\r\n"]},"metadata":{},"sourceType":"module"}