{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nimport URLs from \"../assets/URLs\";\n\nconst useHTTP = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const sendOrder = useCallback(async data => {\n    setIsLoading(true);\n\n    try {\n      const responce = await fetch(URLs.orders, {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n\n      if (!responce.ok) {\n        throw new Error('failed to add order');\n      }\n    } catch (e) {\n      setIsLoading(false);\n      setHasError(e.message || 'there was an error, but failed to collect message');\n    }\n\n    setIsLoading(false);\n  }, []);\n\n  const sendMeal = async data => {\n    setIsLoading(true);\n\n    try {\n      const responce = await fetch(URLs.meals, {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n\n      if (!responce.ok) {\n        throw new Error('failed to add meal');\n      }\n    } catch (e) {\n      setIsLoading(false);\n      setHasError(e.message || 'there was an error, but failed to collect message');\n    }\n\n    setIsLoading(false);\n  };\n\n  const getMeals = useCallback(async setMeals => {\n    setIsLoading(true);\n    setHasError(false);\n    const loadedMeals = [];\n\n    try {\n      const responce = await fetch(URLs.meals);\n\n      if (!responce.ok) {\n        throw new Error(\"failed to get available meals\");\n      }\n\n      const data = await responce.json();\n\n      for (const mealKey in data) {\n        loadedMeals.push({\n          id: mealKey,\n          name: data[mealKey].name,\n          description: data[mealKey].description,\n          price: +data[mealKey].price\n        });\n      }\n\n      setMeals(loadedMeals);\n    } catch (e) {\n      setHasError(e.message || \"there was an error, but failed to collect message\");\n    }\n\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading,\n    hasError,\n    sendMeal,\n    getMeals,\n    sendOrder\n  };\n};\n\n_s(useHTTP, \"Jxmt+tj4RF7JWXwzGSjxNnO2esk=\");\n\nexport default useHTTP;","map":{"version":3,"sources":["D:/Dev/React/06-food-order-code-along/src/hooks/useHTTP.js"],"names":["useState","useCallback","URLs","useHTTP","isLoading","setIsLoading","hasError","setHasError","sendOrder","data","responce","fetch","orders","method","headers","body","JSON","stringify","ok","Error","e","message","sendMeal","meals","getMeals","setMeals","loadedMeals","json","mealKey","push","id","name","description","price"],"mappings":"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","sourcesContent":["import { useState,useCallback } from \"react\";\r\nimport URLs from \"../assets/URLs\";\r\n\r\nconst useHTTP = () =>{\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [hasError, setHasError] = useState(false);\r\n    \r\n    const sendOrder = useCallback(async (data) => {\r\n      setIsLoading(true);\r\n      try{\r\n       const responce = await fetch(URLs.orders, {\r\n           method: 'POST',\r\n           headers: { \r\n               \"Content-Type\": \"application/json\" \r\n             },\r\n           body: JSON.stringify(data),\r\n       })\r\n       if(!responce.ok){ throw new Error('failed to add order') }\r\n       } catch (e) { setIsLoading(false); setHasError(e.message || 'there was an error, but failed to collect message'); }\r\n      setIsLoading(false);\r\n  },[]);\r\n  \r\n    const sendMeal = async (data) => {\r\n       setIsLoading(true);\r\n       try{\r\n        const responce = await fetch(URLs.meals, {\r\n            method: 'POST',\r\n            headers: { \r\n                \"Content-Type\": \"application/json\" \r\n              },\r\n            body: JSON.stringify(data),\r\n        })\r\n        if(!responce.ok){ throw new Error('failed to add meal') }\r\n        } catch (e) { setIsLoading(false); setHasError(e.message || 'there was an error, but failed to collect message'); }\r\n        setIsLoading(false);\r\n    }\r\n    \r\n    const getMeals = useCallback(async (setMeals) => {\r\n        setIsLoading(true);\r\n        setHasError(false);\r\n        const loadedMeals = [];\r\n    \r\n        try {\r\n          const responce = await fetch(URLs.meals);\r\n          if (!responce.ok) {\r\n            throw new Error(\"failed to get available meals\");\r\n          }\r\n    \r\n          const data = await responce.json();\r\n    \r\n          for (const mealKey in data) {\r\n            loadedMeals.push({\r\n              id: mealKey,\r\n              name: data[mealKey].name,\r\n              description: data[mealKey].description,\r\n              price: +data[mealKey].price,\r\n            });\r\n          }\r\n    \r\n          setMeals(loadedMeals)\r\n        } catch (e) {\r\n          setHasError( e.message || \"there was an error, but failed to collect message\" );\r\n        }\r\n        setIsLoading(false);\r\n      }, []);\r\n\r\n    \r\n    return{\r\n        isLoading,\r\n        hasError,\r\n        sendMeal, \r\n        getMeals,\r\n        sendOrder\r\n    }\r\n}; export default useHTTP;"]},"metadata":{},"sourceType":"module"}